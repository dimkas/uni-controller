'use strict';

const db = require(`uc-db`);
const wscli = require(`uc-wscli`);
const utils = require('uc-utils');

module.exports = function(PluginName, PluginNamePN, options) {
    let $this = this;

    options = options || {};
    if(!options.maxCount) options.maxCount = 8;

    let pluginName = PluginName.toCamel();
    // this.init = function () {
    //     db.init(getDbInitData(PluginName));
    // };


    $this.checkInRange = function (arg){
        return wscli.checkInRange(arg, 1,
            db.querySync(`SELECT Count FROM ${PluginNamePN}Settings`)[0].Count,
            PluginName);
    };

    wscli.context.add(pluginName);

    let obj = {};
    obj[`${PluginName}`] = Number;
    wscli.commands.add(obj,
        function(arg){
            wscli.context.current = wscli.context[pluginName];
            if(arg)
                $this.checkInRange(arg); // noinspection CommaExpressionJS
            wscli.current[pluginName] = arg;
            return true;
        },
        `Set current ${PluginName}.`
    );

    wscli.commands.add({GetCount: null},
        function(arg){
            if(wscli.context.current === wscli.context[pluginName]) {
                let row = db.querySync(`SELECT Count FROM ${PluginNamePN}Settings`)[0];
                // noinspection JSUnresolvedVariable
                wscli.sendClientData(`#${PluginName},Count:${row.Count}`);
                return true;
            }
        },
        `Get ${PluginNamePN} count.`
    );

    wscli.commands.add({SetCount:Number},
        function(arg){
            if(wscli.context.current === wscli.context[pluginName]) {

                let row = db.querySync(`SELECT MaxCount, Count FROM ${PluginNamePN}Settings`)[0];
                wscli.checkInRange(arg, 0, row.MaxCount, PluginName);

                let count = row.Count;
                if(count >= arg){
                    let q = `DELETE FROM ${PluginNamePN} WHERE ${PluginName}ID > $Count;
                    UPDATE ${PluginNamePN}Settings SET Count = (SELECT COUNT(*) AS Count FROM ${PluginNamePN});
                    SELECT Count FROM ${PluginNamePN}Settings;`;
                    let row = db.querySync(q, {$Count: arg})[0];
                    wscli.sendData(`#${PluginName},Count:${row.Count}`);
                }else{
                    let row = db.querySync(`SELECT Type, TypeID FROM ${PluginNamePN}Types ORDER BY TypeID LIMIT 1`)[0];
                    if(!row)
                        throw (`Types of ${PluginNamePN} not defined`);
                    let qp = {$TypeID: row.TypeID};
                    let q = `INSERT INTO ${PluginNamePN} (${PluginName}ID, TypeID)
                    VALUES ($SchemaID, $TypeID);
                    UPDATE ${PluginNamePN}Settings SET Count = (SELECT COUNT(*) AS Count FROM ${PluginNamePN});
                    SELECT Count, ${PluginName}ID AS ID, Type
                    FROM ${PluginNamePN}Settings AS ${PluginNamePN}Settings, ${PluginNamePN} AS ${PluginNamePN}
                    LEFT JOIN ${PluginNamePN}Types AS ${PluginNamePN}Types
                        ON ${PluginNamePN}.TypeID = ${PluginNamePN}Types.TypeID
                        WHERE ${PluginNamePN}.${PluginName}ID = $ID`;
                    for(let i = count + 1; i <= arg; i++){
                        qp.$ID = i;
                        let row = db.querySync(q, qp)[0];
                        wscli.sendData(`#${PluginName},Count:${row.Count}`);
                        wscli.sendData(`#${PluginName}:${row.ID},Type:${row.Type}`);
                    }
                }
                return true;
            }
        },
        `Set ${PluginNamePN} count.`
    );



    function GetInfo(info, arg) {
        if(wscli.context.current === wscli.context[pluginName]){
            let res = false;
            // noinspection JSUnresolvedVariable
            let q = `SELECT ${PluginName}ID AS ID, ${info}
            FROM ${PluginNamePN} AS ${PluginNamePN}` + (info === 'Type' ? `
            LEFT JOIN ${PluginNamePN}Types AS ${PluginNamePN}Types
                ON ${PluginNamePN}.TypeID = ${PluginNamePN}Types.TypeID` : '') + `
            WHERE (${PluginName}ID = $ID OR ($ID = 0 AND ${PluginName}ID <= (SELECT Count FROM ${PluginNamePN}Settings)))`;
            let rows = db.querySync(q, {$ID: wscli.current[pluginName]});
            rows.forEach(function (row) { // noinspection JSUnresolvedVariable
                let data = `#${PluginName}:${row.ID},${info}:${row[info]}`;
                wscli.sendClientData(data);
                res = true;
            });

            return true;
        }
    }

    wscli.commands.add({GetType: null}, GetInfo.bind(undefined, 'Type'), `Get ${PluginName} type.`);
    wscli.commands.add({SetType: String},
        function(arg) {
            if(wscli.context.current === wscli.context[pluginName]){
                $this.checkInRange(wscli.current[pluginName]); // noinspection CommaExpressionJS
                let qp = {$ID: wscli.current[pluginName]};
                qp.$Type = arg;
                db.querySync(`UPDATE ${PluginNamePN}
                    SET TypeID = (SELECT TypeID FROM ${PluginNamePN}Types WHERE Type = $Type)
                    WHERE ${PluginName}ID = $ID`, qp);
                let row = db.querySync(`SELECT ${PluginName}ID AS ID, Type
                    FROM ${PluginNamePN}
                    LEFT JOIN ${PluginNamePN}Types AS ${PluginNamePN}Types
                        ON ${PluginNamePN}.TypeID = ${PluginNamePN}Types.TypeID
                WHERE ${PluginName}ID = $ID`, qp)[0];
                wscli.sendData(`#${PluginName}:${row.ID},Type:${row.Type}`);
                // noinspection JSConstructorReturnsPrimitive
                return true;
            }
        },
        `Set ${PluginName} type.`);


    if(options.name) {
        wscli.commands.add({GetName: null}, GetInfo.bind(undefined, 'Name'), `Get ${PluginName} name.`);
        wscli.commands.add({SetName: String},
            function(arg) {
                if(wscli.context.current === wscli.context[pluginName]){
                    $this.checkInRange(wscli.current[pluginName]); // noinspection CommaExpressionJS
                    let qp = {$ID: wscli.current[pluginName]};
                    qp.$Name = arg;
                    db.querySync(`UPDATE ${PluginNamePN} SET Name = $Name
                        WHERE ${PluginName}ID = $ID and Name != $Name`, qp);
                    let row = db.querySync(`SELECT ${PluginName}ID AS ID, Name FROM ${PluginNamePN} WHERE ${PluginName}ID = $ID`, qp)[0];
                    wscli.sendData(`#${PluginName}:${row.ID},Name:${row.Name}`);
                    return true;
                }
            },
            `Set ${PluginName} name.`);
    }


    this.getDbInitData = function(dbData) {

        let tmpl = `{
          "main": {
            "${PluginNamePN}Settings": {
              "schema": {
                "MaxCount": "INTEGER NOT NULL",
                "Count": "INTEGER NOT NULL ON CONFLICT REPLACE DEFAULT 0"
              },
              "data": [
                {"RowID": 1, "MaxCount": ${options.maxCount}, "Count": 0}
              ]
            },
            "${PluginNamePN}Types": {
              "schema": {
                "TypeID": "INTEGER PRIMARY KEY AUTOINCREMENT",
                "Type": "CHAR(32) NOT NULL"
              },
              "unique index": {
                "Type": ["Type"]
              }
            },
            "${PluginNamePN}": {
              "schema": {
                "${PluginName}ID": "INTEGER PRIMARY KEY",
                "TypeID": "INTEGER NOT NULL CONSTRAINT [TypeID] REFERENCES [${PluginNamePN}Types]([TypeID]) ON DELETE SET NULL",
                "Name": "CHAR(32) NOT NULL ON CONFLICT REPLACE DEFAULT ''"
              }
            }
          }
        }`;

        tmpl = JSON.parse(tmpl);
        if(dbData)
            utils.mixin(tmpl, JSON.parse(dbData));

        return JSON.stringify(tmpl, undefined, '\t');
    }

};




