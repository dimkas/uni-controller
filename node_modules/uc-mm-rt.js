'use strict';

const fs = require('fs');
const path = require('path');
const utils = require("uc-utils");
const db = require("uc-db").init(getDbInitData());
const router = require("uc-router");


const modules = {};
const module_prototype = Object.getPrototypeOf(module);
module_prototype._require = module_prototype.require;
module_prototype.require = function(name) {
    return modules[name] || this._require(name);
};

const settings = db.querySync(`SELECT WebJsName, CssName FROM PluginsSettings`)[0];

module.exports.loadPlugins = function () {
    fs.writeFileSync(settings.WebJsName, "'use strict';\n\n");
    fs.writeFileSync(settings.CssName, "");

    db.querySync(`CREATE TABLE mem.PluginsToLoad AS SELECT * FROM Plugins;`);
    let q = `SELECT DISTINCT p.Name, p.Version AS Version, p.Directory
        FROM mem.PluginsToLoad as p
            LEFT JOIN PluginsDependences as d
                 ON p.Name = d.Plugin
        WHERE NOT p.Name IN (
            SELECT Plugin FROM mem.LoadedPlugins
            UNION
            SELECT DISTINCT d.Plugin FROM PluginsDependences as d
            LEFT JOIN mem.LoadedPlugins as lp
                 ON d.DependsOn = lp.Plugin
            WHERE lp.[Plugin] IS NULL
        )`;
    let rows;
    do{
        rows = db.querySync(q);
        rows.forEach((row)=>{
            db.querySync(`DELETE FROM mem.PluginsToLoad WHERE Name = $Name`, {$Name: row.Name});
            console.state(`Loading plugin '${row.Name}'...`);
            try{
                loadPlugin(row);
                console.info(`Plugin '${row.Name}' loaded`);
            }catch (err){
                console.error(`Plugin '${row.Name}' not loaded:`);//${err.message || err}`);
                console.error(err);
            }
        });
    }while(rows.length);

    db.querySync(`DROP TABLE mem.PluginsToLoad`);
};

function loadPlugin(row) {

    /** @namespace row.Directory */
    const obj = JSON.parse(fs.readFileSync(row.Directory + '/package.json', 'utf8'));
    if(obj.node){
        /** @namespace obj.node */
        let plugin = require(path.parse(module.filename).dir + '/.' + row.Directory + '/' + obj.node);
        module.exports[row.Name] = plugin;
        modules[row.Name] = plugin;
        if(plugin.hasOwnProperty('init')){
            plugin.init();
        }
    }
    const about = `\n/* ${row.Name} v.${row.Version} */\n`;
    /** @namespace obj.web */
    /** @namespace obj.web.js */
    if(obj.web && obj.web.js)
        obj.web.js.forEach(function (file) {
            fs.appendFileSync(settings.WebJsName, about);
            let start = `\nfunction ${row.Name.toCamel()}_class(){
                        \nlet module = {exports: this};\n`;
            fs.appendFileSync(settings.WebJsName, start);

            fs.appendFileSync(settings.WebJsName, fs.readFileSync(row.Directory + '/' + file));

            let end = `\n}
                        \n$plugins['${row.Name}'] = new ${row.Name.toCamel()}_class();\n`;
            fs.appendFileSync(settings.WebJsName, end);
        });

    if(obj.web && obj.web.css)
        obj.web.css.forEach(function (file) {
            fs.appendFileSync(settings.CssName, about);
            fs.appendFileSync(settings.CssName, fs.readFileSync(row.Directory + '/' + file));
        });

    /** @namespace row.Name */
    db.querySync("INSERT INTO mem.LoadedPlugins (Plugin) VALUES ($Plugin)", {$Plugin: row.Name});

}



function getDbInitData() {

    return `{
          "main": {
            "PluginsSettings": {
              "schema": {
                "WebJsName": "CHAR(32) NOT NULL",
                "CssName": "CHAR(32) NOT NULL"
              },
              "data": [
                {"RowID": 1, "WebJsName": "./www/uc-web-plugins.js", "CssName": "./www/uc-plugins.css"}
              ]
            },
            "Plugins": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16) NOT NULL ON CONFLICT REPLACE DEFAULT ''",
              "Directory": "CHAR(64) NOT NULL",
              "UninstallInfo": "TEXT"
            },
            "PluginsDependences": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name]) ON DELETE CASCADE",
              "DependsOn": "CHAR(64) NOT NULL CONSTRAINT [DependsOn] REFERENCES [Plugins]([Name]) ON DELETE SET NULL"
            }
          },
          "mem":{
            "LoadedPlugins": {
              "Order": "INTEGER PRIMARY KEY AUTOINCREMENT",
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name]) ON DELETE CASCADE"
            }
          }
        }`;
}

let urlPlugins = "/plugins";
router.get(urlPlugins,
    function (req, res) {
        res.writeHead(200, {'Content-Type': 'text/json'});
        let q = `SELECT Name AS name, Version as version
            FROM mem.LoadedPlugins AS LoadedPlugins
            LEFT JOIN Plugins AS Plugins
                ON LoadedPlugins.Plugin = Plugins.Name
            ORDER BY [Order]`;
        res.write(JSON.stringify(db.querySync(q)));
        res.end();
    },
    'get plugins info');
