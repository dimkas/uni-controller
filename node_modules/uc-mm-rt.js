'use strict';

const fs = require('fs');
const path = require('path');
const utils = require("uc-utils");
const db = require("uc-db").init(getDbInitData());
const router = require("uc-router");


const modules = {};
const module_prototype = Object.getPrototypeOf(module);
module_prototype._require = module_prototype.require;
module_prototype.require = function(name) {
    return modules[name] || this._require(name);
};

const settings = db.querySync(`SELECT WebJsName, CssName FROM PluginsSettings`)[0];

module.exports.loadPlugins = function () {
    fs.writeFileSync(settings.WebJsName, "'use strict';\n\n");
    fs.writeFileSync(settings.CssName, "");

    db.querySync(`CREATE TABLE mem.PluginsToLoad AS SELECT * FROM Plugins;`);
    let q = `SELECT DISTINCT p.Name, p.Version AS Version, p.Directory
        FROM mem.PluginsToLoad as p
            LEFT JOIN PluginsDependences as d
                 ON p.Name = d.Plugin
        WHERE NOT p.Name IN (
            SELECT Plugin FROM mem.LoadedPlugins
            UNION
            SELECT DISTINCT d.Plugin FROM PluginsDependences as d
            LEFT JOIN mem.LoadedPlugins as lp
                 ON d.DependsOn = lp.Plugin
            WHERE lp.[Plugin] IS NULL)
            ORDER BY Name
        `;
    let rows;
    do{
        rows = db.querySync(q);
        rows.find((row)=>{
            let newVersion = false;
            console.state(`Loading plugin '${row.Name}'...`);
            try {
                db.beginTransaction();
                newVersion = loadPlugin(row.Directory);
                db.commitTransaction();
                if (newVersion) {
                    console.warn(`Plugin '${row.Name}' will be updated`);
                    return true;
                }else
                    console.info(`Plugin '${row.Name}' loaded`);
            }catch (err){
                if(db.isTransaction())
                    db.rollbackTransaction();
                console.error(`Plugin '${row.Name}' not loaded:`);//${err.message || err}`);
                console.error(err);
            }
            if(!newVersion) // если новая версия - могут быть новые зависимости, повторим
                db.querySync(`DELETE FROM mem.PluginsToLoad WHERE Name = $Name`, {$Name: row.Name});
        });
    }while(rows.length);

    db.querySync(`SELECT * FROM mem.PluginsToLoad`).forEach(row=>console.error(`PLugin ${row.Name} not loaded, depends wrong.`));

    db.querySync(`DROP TABLE mem.PluginsToLoad`);
};


function updatePluginDependences(obj) {
    let qp = {$Name: obj.name};
    let q = `DELETE FROM PluginsDependences WHERE Plugin = $Name;
        INSERT INTO PluginsDependences(Plugin, DependsOn)
            SELECT '', '' WHERE 1 = 0\n`;
    for(let d in obj['plugins-dependencies']){
        q += `UNION SELECT $Name, '${d}'\n`;
    }
    q += ';\n';
    db.querySync(q, qp);
}


function updatePlugin(obj, directory, currentVersion) {
    let plugin = require(`${process.cwd()}/${directory}/${obj.node}`);
    if(!plugin.update)
        return;
    let arr = [];
    for(let key in plugin.update)
        arr.push({ver: key, cb: plugin.update[key]});

    if(currentVersion){
        arr = arr.filter(item=>( gtVersion(item.ver, currentVersion) && lteVersion(item.ver, obj.version)));
        arr = arr.sort((i1, i2)=>cmpVersion(i1.ver, i2.ver));
    }else{
        arr = arr.sort((i1, i2)=>-cmpVersion(i1.ver, i2.ver));
        arr = arr.filter(item=>( lteVersion(item.ver, obj.version)));
        arr.splice(1, arr.length);
    }

    arr.forEach(item=>{

        let ui = item.cb();

        let qp = {$Name: obj.name, $Version: item.ver, $UninstallInfo: ui};
        let q = `UPDATE Plugins SET Version = $Version WHERE Name = $Name;
            DELETE FROM PluginsUninstallInfo WHERE Plugin = $Name;\n`;
        if(ui)
            q += `INSERT INTO PluginsUninstallInfo(Plugin, UninstallInfo) VALUES ($Name, $UninstallInfo);`;
        db.querySync(q, qp);

    });

}


function loadPlugin(directory) {

    const obj = JSON.parse(fs.readFileSync(directory + '/package.json', 'utf8'));
    let qp = {$Name: obj.name};

    let rows = db.querySync("SELECT * FROM Plugins WHERE Name = $Name", qp);
    if(!rows.length)
        throw(`Plugin ${obj.name} not installed.`);

    let pInfo = rows[0];
    if(pInfo.Version !== obj.version){
        qp.$NewVersion = obj.version;
        // need update
        if(!db.querySync(`SELECT * FROM mem.UpdatePlugins WHERE Plugin = $Name`, qp).length){
            let q = `INSERT INTO mem.UpdatePlugins(Plugin, NewVersion) VALUES ($Name, $NewVersion);`;
            db.querySync(q, qp);
            updatePluginDependences(obj);
            return true;
        }else{
            db.querySync(`DELETE FROM mem.UpdatePlugins WHERE Plugin = $Name`, qp);
            if(obj.node)
                updatePlugin(obj, pInfo.Directory, pInfo.Version);
            db.querySync(`UPDATE Plugins SET Version = $NewVersion WHERE Name = $Name`, qp);
        }
    }

    if(obj.node) {
        let plugin = require(`${process.cwd()}/${directory}/${obj.node}`);
        if (plugin.hasOwnProperty('init'))
            plugin.init();
        modules[obj.name] = plugin;
    }

    const about = `\n/* ${pInfo.Name} v.${pInfo.Version} */\n`;

    if((obj.web ||{}).js)
        obj.web.js.forEach(function (file) {
            fs.appendFileSync(settings.WebJsName, about);
            let start = `\n
                function ${pInfo.Name.toCamel()}_class(){\n
                let module = {exports: this};\n`;
            fs.appendFileSync(settings.WebJsName, start);

            fs.appendFileSync(settings.WebJsName, fs.readFileSync(pInfo.Directory + '/' + file));

            let end = `\n}\n
                $plugins['${pInfo.Name}'] = new ${pInfo.Name.toCamel()}_class();\n`;
            fs.appendFileSync(settings.WebJsName, end);
        });

    if((obj.web ||{}).css)
        obj.web.css.forEach(function (file) {
            fs.appendFileSync(settings.CssName, about);
            fs.appendFileSync(settings.CssName, fs.readFileSync(pInfo.Directory + '/' + file));
        });

    /** @namespace row.Name */
    db.querySync("INSERT INTO mem.LoadedPlugins (Plugin) VALUES ($Plugin)", {$Plugin: pInfo.Name});

}


function getDbInitData() {

    return `{
          "main": {
            "PluginsSettings": {
              "schema": {
                "WebJsName": "CHAR(32) NOT NULL",
                "CssName": "CHAR(32) NOT NULL"
              },
              "data": [
                {"RowID": 1, "WebJsName": "./www/uc-web-plugins.js", "CssName": "./www/uc-plugins.css"}
              ]
            },
            "Plugins": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16) NOT NULL ON CONFLICT REPLACE DEFAULT ''",
              "Directory": "CHAR(128) NOT NULL"
            },
            "PluginsDependences": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name]) ON DELETE CASCADE",
              "DependsOn": "CHAR(64) NOT NULL CONSTRAINT [DependsOn] REFERENCES [Plugins]([Name]) ON DELETE SET NULL"
            },
            "PluginsUninstallInfo": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name]) ON DELETE CASCADE",
              "UninstallInfo": "TEXT"
            }
          },
          "mem":{
            "LoadedPlugins": {
              "Order": "INTEGER PRIMARY KEY AUTOINCREMENT",
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name]) ON DELETE CASCADE"
            },
            "UpdatePlugins": {
              "Plugin": "CHAR(64) NOT NULL",
              "NewVersion": "CHAR(16) NOT NULL"
            }
          }
        }`;
}

let urlPlugins = "/plugins";
router.get(urlPlugins,
    function (req, res) {
        res.writeHead(200, {'Content-Type': 'text/json'});
        let q = `SELECT Name AS name, Version as version
            FROM mem.LoadedPlugins AS LoadedPlugins
            LEFT JOIN Plugins AS Plugins
                ON LoadedPlugins.Plugin = Plugins.Name
            ORDER BY [Order]`;
        res.write(JSON.stringify(db.querySync(q)));
        res.end();
    },
    'get plugins info');

function cmpVersion(a, b) { var i, cmp, len, re = /(\.0)+[^\.]*$/; a = (a + '').replace(re, '').split('.'); b = (b + '').replace(re, '').split('.'); len = Math.min(a.length, b.length); for( i = 0; i < len; i++ ) { cmp = parseInt(a[i], 10) - parseInt(b[i], 10); if( cmp !== 0 ) { return cmp; } } return a.length - b.length; }
function gtVersion(a, b) { return cmpVersion(a, b) > 0; }
function lteVersion(a, b) { return cmpVersion(a, b) <= 0; }
