'use strict';

const fs = require('fs');
const path = require('path');
const utils = require("uc-utils");
const db = require("uc-db");
const router = require("uc-router");

module.exports.version = '0.0.2';

const modules = {};
const module_prototype = Object.getPrototypeOf(module);
module_prototype._require = module_prototype.require;
module_prototype.require = function(name) {
    let res = modules[name] || this._require(name);

    if(name.match(/^uc-/) && res.version){

        if(!db.querySync(`SELECT name FROM sqlite_master WHERE type='table' AND name='ModulesVersions'`).length)
            db.init(getDbInitData_ModulesVersions());

        let rows = db.querySync(`INSERT OR IGNORE INTO ModulesVersions(Name) VALUES($Name);
            SELECT * FROM ModulesVersions WHERE Name = $Name`, {$Name: name});
        if(rows[0].Version != res.version){
            console.info(`Update module ${name} to ${res.version}`);
            let arr = getSortedUpdateFunctions(res, res.version, rows[0].Version);

            arr.forEach(item=>{

                try {
                    db.beginTransaction();

                    item.cb();

                    db.querySync(`UPDATE ModulesVersions SET Version = $Version WHERE Name = $Name`, {
                            $Name: name,
                            $Version: item.ver
                        });
                    db.commitTransaction();
                }catch (err){
                    if(db.isTransaction())
                        db.rollbackTransaction();
                    throw err;
                }

            });

            // нужно обновить версию
            db.querySync(`UPDATE ModulesVersions SET Version = $Version WHERE Name = $Name`, {
                $Name: name,
                $Version: res.version
            });


        }
    }
    return res;
};


module.exports.update = {};
module.exports.update['0.0.2'] = function(){
    db.querySync(`PRAGMA foreign_keys=off`); // disable foreign key constraint check

    try {
        db.beginTransaction(); //start a transaction

        db.querySync(`ALTER TABLE Plugins RENAME TO Plugins_old;`)// ;
        db.init(getDbInitData_0_0_2());

        // Here we can drop column or rename column
        // copy data from the table to the new_table
        db.querySync(`INSERT INTO Plugins(Name, Version)
            SELECT Name, Version
            FROM Plugins_old;
            DROP TABLE Plugins_old;`);

        db.commitTransaction(); // commit the transaction
    }catch (err){
        if(db.isTransaction())
            db.rollbackTransaction();
        throw err;
    }

    db.querySync(`PRAGMA foreign_keys=on`); // enable foreign key constraint check
};


module.exports.init = function () {
    db.init(getDbInitData_0_0_2());
    module.settings = db.querySync(`SELECT WebJsName, CssName FROM PluginsSettings`)[0];
    fs.writeFileSync(module.settings.WebJsName, "'use strict';\n\n");
    fs.writeFileSync(module.settings.CssName, "");

};

function checkPluginsDirectory() {
    console.state(`Check plugin directory...`);
    fs.readdirSync('./plugins').forEach((dir)=> {
        let fn = `./plugins/${dir}/package.json`;
        if (fs.existsSync(fn)) {

            let logHandle = utils.beginLog();
            try{
                const obj = JSON.parse(fs.readFileSync(fn, 'utf8'));
                let qp = {$Name: obj.name, $Dir: `${dir}`, $Ver: obj.version};
                db.querySync(`INSERT INTO mem.PluginsLoadStatus(Name, Directory, Version) VALUES($Name, $Dir, $Ver)`, qp);
            }catch (err){
                console.error(err);

                db.querySync(`INSERT INTO mem.PluginsLoadStatus(Name, Directory, StatusID, ErrorLog)
                    VALUES((SELECT 1 + COUNT(*) FROM mem.PluginsLoadStatus), $Dir, 3, $log)`,
                    {$Dir: dir, $log: utils.endLog(logHandle)});
            }
        }
    });

    db.querySync(`INSERT INTO mem.PluginsLoadStatus(Name, Version, Directory, StatusID)
            SELECT p.[Name], p.Version, NULL, 2
            FROM main.[Plugins] AS p
            LEFT JOIN mem.[PluginsLoadStatus] AS s
                ON p.[Name] = s.Name
            WHERE s.[Name] IS NULL;
        REPLACE INTO mem.PluginsLoadStatus(Name, Version, Directory, StatusID)
            SELECT s.[Name], s.[Version], s.Directory, -1
            FROM mem.[PluginsLoadStatus] AS s
            LEFT JOIN  main.[Plugins] AS p
                ON s.Name = p.[Name]
            WHERE p.[Name] IS NULL AND StatusID IS NULL
        `);
}

function checkPluginsDependence(){
    console.state(`Check plugins dependences...`);
    let rows = db.querySync(`SELECT s.[Name] AS Name, s.Directory AS Directory, s.Version AS New, p.Version AS Old
        FROM mem.[PluginsLoadStatus] AS s
        LEFT JOIN  main.[Plugins] AS p
            ON s.Name = p.[Name]
        WHERE s.[Version] != p.Version`);
    rows.forEach(row=>{
        console.warn(`Plugin version changed, updating dependences: '${row.Name}' (${row.Old} -> ${row.New})`);
        const obj = JSON.parse(fs.readFileSync(`./plugins/${row.Directory}/package.json`, 'utf8'));
        updatePluginDependences(obj);
    });

}

module.exports.loadPlugins = function () {
    let rows;

    checkPluginsDirectory();
    checkPluginsDependence();

    let q = `SELECT DISTINCT ls.*, p.Version AS CurrentVersion
        FROM mem.PluginsLoadStatus as ls
            LEFT JOIN PluginsDependences as d
                 ON ls.Name = d.Plugin
            LEFT JOIN Plugins as p
                 ON ls.Name = p.Name
        WHERE ls.StatusID IS NULL
        AND NOT ls.Name IN (
            SELECT Name FROM mem.PluginsLoadStatus WHERE NOT StatusID IS NULL 
            UNION
            SELECT DISTINCT d.Plugin FROM PluginsDependences as d
            LEFT JOIN mem.PluginsLoadStatus as lp
                 ON d.DependsOn = lp.Name AND lp.StatusID = 0
            WHERE lp.[Name] IS NULL)
            ORDER BY Name`;
    do{
        rows = db.querySync(q);
        rows.find((row)=>{
            //let newVersion = false;
            console.state(`Loading plugin '${row.Name}'...`);
            let logHandle = utils.beginLog();
            try {
                db.beginTransaction();

                const obj = JSON.parse(fs.readFileSync(`./plugins/${row.Directory}/package.json`, 'utf8'));

                if(row.Version != row.CurrentVersion) {
                    updatePlugin(obj, row.Directory, row.CurrentVersion);
                    console.warn(`Plugin '${row.Name}' was updated`);
                }

                loadPlugin(obj, row.Directory);

                db.querySync(`UPDATE mem.[PluginsLoadStatus] SET StatusID = 0 WHERE Name = $Name`, {$Name: row.Name});

                db.commitTransaction();
                console.info(`Plugin '${row.Name}' loaded`);
                utils.endLog(logHandle);
            }catch (err){
                if(db.isTransaction())
                    db.rollbackTransaction();
                console.error(`Plugin '${row.Name}' not loaded:`);//${err.message || err}`);
                console.error(err);

                db.querySync(`UPDATE mem.[PluginsLoadStatus] SET StatusID = 1, ErrorLog = $log WHERE Name = $Name`,
                    {$Name: row.Name, $log: utils.endLog(logHandle)});
            }
        });
    }while(rows.length);

    db.querySync(`SELECT * FROM mem.PluginsLoadStatus WHERE StatusID IS NULL`).forEach(row=>{
        let logHandle = utils.beginLog();
        let msg = `Plugin ${row.Name} not loaded, because depends on plugin not loaded:`;
        db.querySync(`SELECT DISTINCT p.Name, d.DependsOn
            FROM mem.PluginsLoadStatus as p
                LEFT JOIN PluginsDependences as d
                    ON p.Name = d.Plugin
                LEFT JOIN mem.PluginsLoadStatus as l
                    ON d.DependsOn = l.Name AND l.StatusID = 0 
            WHERE l.Name IS NULL AND p.Name = $Name`, {$Name: row.Name})
            .forEach(row => msg += `\n${row.DependsOn}`);
        console.error(msg);
        db.querySync(`UPDATE mem.[PluginsLoadStatus] SET StatusID = 1, ErrorLog = $log WHERE Name = $Name`,
            {$Name: row.Name, $log: utils.endLog(logHandle)});
    });

//    db.querySync(`DROP TABLE mem.PluginsToLoad`);
};


function updatePluginDependences(obj) {
    let qp = {$Name: obj.name};
    let q = `DELETE FROM PluginsDependences WHERE Plugin = $Name;
        INSERT INTO PluginsDependences(Plugin, DependsOn)
            SELECT '', '' WHERE 1 = 0\n`;
    for(let d in obj['plugins-dependencies']){
        q += `UNION SELECT $Name, '${d}'\n`;
    }
    q += ';\n';
    db.querySync(q, qp);
}


function getSortedUpdateFunctions(mod, version, currentVersion) {
    let arr = [];
    if(!mod.update)
        return arr;
    for(let key in mod.update)
        arr.push({ver: key, cb: mod.update[key]});

    if(currentVersion){
        arr = arr.filter(item=>( gtVersion(item.ver, currentVersion) && lteVersion(item.ver, version)));
        arr = arr.sort((i1, i2)=>cmpVersion(i1.ver, i2.ver));
    }else{
        arr = arr.sort((i1, i2)=>-cmpVersion(i1.ver, i2.ver));
        arr = arr.filter(item=>( lteVersion(item.ver, version)));
        arr.splice(1, arr.length);
    }

    return arr;

}

function updatePlugin(obj, directory, currentVersion) {
    if(obj.node){

        let plugin = require(`${process.cwd()}/plugins/${directory}/${obj.node}`);

        let arr = getSortedUpdateFunctions(plugin, obj.version, currentVersion);

        arr.forEach(item=>{
            try{
                db.beginTransaction();

                let ui = item.cb();

                let qp = {$Name: obj.name, $Version: item.ver, $UninstallInfo: ui};
                let q = `UPDATE Plugins SET Version = $Version WHERE Name = $Name;
                DELETE FROM PluginsUninstallInfo WHERE Plugin = $Name;\n`;
                if(ui)
                    q += `INSERT INTO PluginsUninstallInfo(Plugin, UninstallInfo) VALUES ($Name, $UninstallInfo);`;
                db.querySync(q, qp);

                db.commitTransaction();
            }catch (err){
                if(db.isTransaction())
                    db.rollbackTransaction();
                throw err;
            }

        });
    }

    db.querySync(`UPDATE Plugins SET Version = $Version WHERE Name = $Name`, {$Name: obj.name, $Version: obj.version});

}


function loadPlugin(obj, directory) {

    let qp = {$Name: obj.name};

    if(obj.node) {
        let plugin = require(`${process.cwd()}/plugins/${directory}/${obj.node}`);
        if (plugin.hasOwnProperty('init'))
            plugin.init();
        modules[obj.name] = plugin;
    }

    const about = `\n/* ${obj.name} v.${obj.version} */\n`;

    if((obj.web ||{}).js)
        obj.web.js.forEach(function (file) {
            fs.appendFileSync(module.settings.WebJsName, about);
            let start = `\n
                function ${obj.name.toCamel()}_class(){\n
                let module = {exports: this};\n`;
            fs.appendFileSync(module.settings.WebJsName, start);

            fs.appendFileSync(module.settings.WebJsName, fs.readFileSync(`./plugins/${directory}/${file}`));

            let end = `\n}\n
                $plugins['${obj.name}'] = new ${obj.name.toCamel()}_class();\n`;
            fs.appendFileSync(module.settings.WebJsName, end);
        });

    if((obj.web ||{}).css)
        obj.web.css.forEach(function (file) {
            fs.appendFileSync(module.settings.CssName, about);
            fs.appendFileSync(module.settings.CssName, fs.readFileSync(`./plugins/${directory}/${file}`));
        });

    /** @namespace row.Name */
    //db.querySync("INSERT INTO mem.LoadedPlugins (Name) VALUES ($Plugin)", {$Plugin: obj.name});

}


function getDbInitData_ModulesVersions() {

    return `{
          "main": {
            "ModulesVersions": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16)"
            }
          }
        }`;
}

function getDbInitData_0_0_2() {

    return `{
          "main": {
            "PluginsSettings": {
              "schema": {
                "WebJsName": "CHAR(32) NOT NULL",
                "CssName": "CHAR(32) NOT NULL"
              },
              "data": [
                {"RowID": 1, "WebJsName": "./www/uc-web-plugins.js", "CssName": "./www/uc-plugins.css"}
              ]
            },
            "Plugins": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16) NOT NULL"
            },
            "PluginsDependences": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name])",
              "DependsOn": "CHAR(64) NOT NULL CONSTRAINT [DependsOn] REFERENCES [Plugins]([Name]) ON DELETE SET NULL"
            },
            "PluginsUninstallInfo": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name])",
              "UninstallInfo": "TEXT"
            },
            "PluginsStatuses": {
              "schema": {
                "StatusID": "INTEGER PRIMARY KEY",
                "Name": "CHAR(32) NOT NULL"
              },
              "data": [
                {"StatusID": -1, "Name": "not installed"},
                {"StatusID": 0, "Name": "loaded"},
                {"StatusID": 1, "Name": "load error"},
                {"StatusID": 2, "Name": "not exist"},
                {"StatusID": 3, "Name": "package error"}
              ]
            }
          },
          "mem":{
            "PluginsLoadStatus": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16)",
              "Directory": "CHAR(64)",
              "StatusID": "INTEGER",
              "ErrorLog": "TEXT"
            }
          }
        }`;
}
function getDbInitData() {

    return `{
          "main": {
            "PluginsSettings": {
              "schema": {
                "WebJsName": "CHAR(32) NOT NULL",
                "CssName": "CHAR(32) NOT NULL"
              },
              "data": [
                {"RowID": 1, "WebJsName": "./www/uc-web-plugins.js", "CssName": "./www/uc-plugins.css"}
              ]
            },
            "Plugins": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16) NOT NULL",
              "Directory": "CHAR(128) NOT NULL"
            },
            "PluginsDependences": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name])",
              "DependsOn": "CHAR(64) NOT NULL CONSTRAINT [DependsOn] REFERENCES [Plugins]([Name]) ON DELETE SET NULL"
            },
            "PluginsUninstallInfo": {
              "Plugin": "CHAR(64) NOT NULL CONSTRAINT [Plugin] REFERENCES [Plugins]([Name])",
              "UninstallInfo": "TEXT"
            },
            "PluginsStatuses": {
              "schema": {
                "StatusID": "INTEGER PRIMARY KEY",
                "Name": "CHAR(32) NOT NULL"
              },
              "data": [
                {"StatusID": -1, "Name": "not installed"},
                {"StatusID": 0, "Name": "loaded"},
                {"StatusID": 1, "Name": "load error"},
                {"StatusID": 2, "Name": "not exist"},
                {"StatusID": 3, "Name": "package error"}
              ]
            }
          },
          "mem":{
            "PluginsLoadStatus": {
              "Name": "CHAR(64) NOT NULL PRIMARY KEY",
              "Version": "CHAR(16)",
              "Directory": "CHAR(64) NOT NULL",
              "StatusID": "INTEGER",
              "ErrorLog": "TEXT"
            }
          }
        }`;
}

router.get('/plugins',
    function (req, res) {
        res.writeHead(200, {'Content-Type': 'text/json'});
        res.write(JSON.stringify(db.querySync(`SELECT * FROM mem.PluginsLoadStatus ORDER BY [Name]`)));
        res.end();
    },
    'get plugins info');

router.get('/modules',
    function (req, res) {
        res.writeHead(200, {'Content-Type': 'text/json'});
        res.write(JSON.stringify(db.querySync(`SELECT * FROM ModulesVersions ORDER BY [Name]`)));
        res.end();
    },
    'get modules info');


function cmpVersion(a, b) { var i, cmp, len, re = /(\.0)+[^\.]*$/; a = (a + '').replace(re, '').split('.'); b = (b + '').replace(re, '').split('.'); len = Math.min(a.length, b.length); for( i = 0; i < len; i++ ) { cmp = parseInt(a[i], 10) - parseInt(b[i], 10); if( cmp !== 0 ) { return cmp; } } return a.length - b.length; }
function gtVersion(a, b) { return cmpVersion(a, b) > 0; }
function lteVersion(a, b) { return cmpVersion(a, b) <= 0; }
